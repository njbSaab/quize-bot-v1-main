"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

var questions = require("../questions/questions");

var fs = require("fs");

var path = require("path");

var stateFilePath = path.join(__dirname, "../data/userStates.json");

module.exports = function (bot) {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  bot.action(/answer_\d+/, function _callee(ctx) {
    var questionIndex, selectedOptionIndex, question, isCorrect, userId, userSession;
    return regeneratorRuntime.async(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            questionIndex = ctx.session.questionIndex || 0;

            if (!(questionIndex >= questions.length)) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return regeneratorRuntime.awrap(ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"));

          case 5:
            return _context.abrupt("return");

          case 6:
            selectedOptionIndex = parseInt(ctx.match[0].split("_")[1]);
            question = questions[questionIndex];
            isCorrect = question.options[selectedOptionIndex] === question.correctAnswer; // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

            userId = ctx.from.id;
            userSession = findUserSession(ctx, userId);

            if (userSession) {
              userSession.data.answeredQuestions++;
              userSession.data.totalQuestions = questions.length;

              if (isCorrect) {
                userSession.data.correctAnswers++;
              }

              saveUserState(ctx, userSession); // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

              console.log("User ID: ".concat(userId));
              console.log("Correct Answers: ".concat(userSession.data.correctAnswers));
              console.log("Answered Questions: ".concat(userSession.data.answeredQuestions));
              console.log("Total Questions: ".concat(userSession.data.totalQuestions));
            }

            _context.next = 14;
            return regeneratorRuntime.awrap(ctx.reply(isCorrect ? "–û—Ç–ª–∏—á–Ω–æ, –≤—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –ø–æ–±–µ–¥–µ üëç" : "–ù–µ–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ ‚úÖ"));

          case 14:
            // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
            ctx.session.questionIndex = questionIndex + 1;

            if (!(ctx.session.questionIndex < questions.length)) {
              _context.next = 20;
              break;
            }

            _context.next = 18;
            return regeneratorRuntime.awrap(startQuiz(ctx));

          case 18:
            _context.next = 22;
            break;

          case 20:
            _context.next = 22;
            return regeneratorRuntime.awrap(ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"));

          case 22:
            _context.next = 27;
            break;

          case 24:
            _context.prev = 24;
            _context.t0 = _context["catch"](0);
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:", _context.t0);

          case 27:
          case "end":
            return _context.stop();
        }
      }
    }, null, null, [[0, 24]]);
  }); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"

  bot.action("back", function _callee2(ctx) {
    var questionIndex;
    return regeneratorRuntime.async(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            questionIndex = ctx.session.questionIndex || 0;

            if (!(questionIndex > 0)) {
              _context2.next = 10;
              break;
            }

            ctx.session.questionIndex = questionIndex - 1;
            _context2.next = 6;
            return regeneratorRuntime.awrap(ctx.reply("–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É."));

          case 6:
            _context2.next = 8;
            return regeneratorRuntime.awrap(startQuiz(ctx));

          case 8:
            _context2.next = 12;
            break;

          case 10:
            _context2.next = 12;
            return regeneratorRuntime.awrap(ctx.reply("–ú—ã –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –≤—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ. –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?", {
              reply_markup: {
                inline_keyboard: [[{
                  text: "–í—ã–π—Ç–∏",
                  callback_data: "exit"
                }]]
              }
            }));

          case 12:
            _context2.next = 17;
            break;

          case 14:
            _context2.prev = 14;
            _context2.t0 = _context2["catch"](0);
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥':", _context2.t0);

          case 17:
          case "end":
            return _context2.stop();
        }
      }
    }, null, null, [[0, 14]]);
  }); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"

  bot.action("exit", function _callee3(ctx) {
    return regeneratorRuntime.async(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return regeneratorRuntime.awrap(ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."));

          case 3:
            ctx.session.questionIndex = 0; // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –≤–æ–ø—Ä–æ—Å–∞

            _context3.next = 9;
            break;

          case 6:
            _context3.prev = 6;
            _context3.t0 = _context3["catch"](0);
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏':", _context3.t0);

          case 9:
          case "end":
            return _context3.stop();
        }
      }
    }, null, null, [[0, 6]]);
  });
}; // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã


function startQuiz(ctx) {
  var questionIndex, question, optionsMarkup;
  return regeneratorRuntime.async(function startQuiz$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          questionIndex = ctx.session.questionIndex || 0;

          if (!(questionIndex >= questions.length)) {
            _context4.next = 5;
            break;
          }

          _context4.next = 4;
          return regeneratorRuntime.awrap(ctx.reply("–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"));

        case 4:
          return _context4.abrupt("return");

        case 5:
          question = questions[questionIndex];
          optionsMarkup = {
            reply_markup: {
              inline_keyboard: [].concat(_toConsumableArray(question.options.reduce(function (acc, option, index) {
                var rowIndex = Math.floor(index / 2);

                if (!acc[rowIndex]) {
                  acc[rowIndex] = [];
                }

                acc[rowIndex].push({
                  text: option,
                  callback_data: "answer_".concat(index)
                });
                return acc;
              }, [])), [[{
                text: "–ù–∞–∑–∞–¥",
                callback_data: "back"
              }] // [{ text: "–í—ã–π—Ç–∏", callback_data: "exit" }],
              ])
            }
          };
          _context4.next = 9;
          return regeneratorRuntime.awrap(ctx.reply(question.question, optionsMarkup));

        case 9:
        case "end":
          return _context4.stop();
      }
    }
  });
} // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


function findUserSession(ctx, userId) {
  if (fs.existsSync(stateFilePath)) {
    var data = fs.readFileSync(stateFilePath, "utf8");

    try {
      var userStates = JSON.parse(data);
      return userStates.sessions.find(function (session) {
        return session.id === userId;
      });
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", err);
    }
  }

  return null;
} // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


function saveUserState(ctx, userSession) {
  if (fs.existsSync(stateFilePath)) {
    var data = fs.readFileSync(stateFilePath, "utf8");

    try {
      var userStates = JSON.parse(data);
      var sessionIndex = userStates.sessions.findIndex(function (session) {
        return session.id === userSession.id;
      });

      if (sessionIndex !== -1) {
        userStates.sessions[sessionIndex] = userSession;
        fs.writeFileSync(stateFilePath, JSON.stringify(userStates, null, 2), "utf8");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON:", err);
    }
  }
} // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é startQuiz –æ—Ç–¥–µ–ª—å–Ω–æ


module.exports.startQuiz = startQuiz;