//quizActions.js
const { Markup } = require("telegraf"); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Markup –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline-–∫–Ω–æ–ø–æ–∫
const questions = require("../questions/questions");
const userState = require("../state/userState");
const fs = require("fs").promises;
const path = require("path");
const stateFilePath = path.join(__dirname, "../data/userStates.json");

module.exports = (bot) => {
  bot.action(/answer_\d+/, async (ctx) => {
    try {
      const questionIndex = ctx.session.questionIndex || 0;
      if (questionIndex >= questions.length) {
        // –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –∏ email
        const userId = ctx.from?.id?.toString() || "unknown";
        let userStates = { sessions: [] };

        try {
          const userStatesData = await fs.readFile(stateFilePath, "utf8");
          userStates = JSON.parse(userStatesData);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ userStates.json:",
              err
            );
          }
        }

        const userSession = userStates.sessions.find(
          (session) => session.id === userId
        );

        if (userSession && userSession.name && userSession.email) {
          // –ï—Å–ª–∏ –ø–æ—á—Ç–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
          await ctx.reply(
            `–°–∫–∞–∂–∏—Ç–µ, —ç—Ç–æ –≤–∞—à–∞ –ø–æ—á—Ç–∞? ${userSession.email}`,
            Markup.inlineKeyboard([
              Markup.button.callback("–î–∞, —ç—Ç–æ –º–æ—è –ø–æ—á—Ç–∞", "confirm_email"),
              Markup.button.callback("–ù–µ—Ç, –¥—Ä—É–≥–∞—è –ø–æ—á—Ç–∞", "new_email"),
            ])
          );
        } else {
          // –ï—Å–ª–∏ –ø–æ—á—Ç—ã –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ—ë
          await ctx.reply(
            "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥"
          );
          await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.");
          ctx.session.awaitingName = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        }

        return;
      }

      const selectedOptionIndex = parseInt(ctx.match[0].split("_")[1]);
      const question = questions[questionIndex];
      const isCorrect =
        question.options[selectedOptionIndex] === question.correctAnswer;

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await userState(ctx, isCorrect);

      await ctx.reply(
        isCorrect
          ? "–û—Ç–ª–∏—á–Ω–æ, –≤—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ –ø–æ–±–µ–¥–µ üëç"
          : "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å, –≤—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏ ‚úÖ"
      );

      // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
      ctx.session.questionIndex = questionIndex + 1;
      if (ctx.session.questionIndex < questions.length) {
        await startQuiz(ctx);
      } else {
        // –ê–Ω–∞–ª–æ–≥–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        const userId = ctx.from?.id?.toString() || "unknown";
        let userStates = { sessions: [] };

        try {
          const userStatesData = await fs.readFile(stateFilePath, "utf8");
          userStates = JSON.parse(userStatesData);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ userStates.json:",
              err
            );
          }
        }

        const userSession = userStates.sessions.find(
          (session) => session.id === userId
        );

        if (userSession && userSession.name && userSession.email) {
          await ctx.reply(
            `–°–∫–∞–∂–∏—Ç–µ, —ç—Ç–æ –≤–∞—à–∞ –ø–æ—á—Ç–∞? ${userSession.email}`,
            Markup.inlineKeyboard([
              Markup.button.callback("–î–∞, —ç—Ç–æ –º–æ—è –ø–æ—á—Ç–∞", "confirm_email"),
              Markup.button.callback("–ù–µ—Ç, –¥—Ä—É–≥–∞—è –ø–æ—á—Ç–∞", "new_email"),
            ])
          );
        } else {
          await ctx.reply(
            "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥"
          );
          await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è.");
          ctx.session.awaitingName = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        }
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞:", err);
    }
  });

  bot.on("text", async (ctx) => {
    try {
      if (ctx.session.awaitingName) {
        ctx.session.name = ctx.message.text;
        ctx.session.awaitingName = false;
        ctx.session.awaitingEmailConfirmation = true;

        const userId = ctx.from?.id?.toString() || "unknown";
        let userStates = { sessions: [] };

        try {
          const userStatesData = await fs.readFile(stateFilePath, "utf8");
          userStates = JSON.parse(userStatesData);
        } catch (err) {
          if (err.code !== "ENOENT") {
            console.error(
              "–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ userStates.json:",
              err
            );
          }
        }

        const userSession = userStates.sessions.find(
          (session) => session.id === userId
        );

        if (userSession && userSession.email) {
          await ctx.reply(
            `–°–∫–∞–∂–∏—Ç–µ, —ç—Ç–æ –≤–∞—à–∞ –ø–æ—á—Ç–∞? ${userSession.email}`,
            Markup.inlineKeyboard([
              Markup.button.callback("–î–∞, —ç—Ç–æ –º–æ—è –ø–æ—á—Ç–∞", "confirm_email"),
              Markup.button.callback("–ù–µ—Ç, –¥—Ä—É–≥–∞—è –ø–æ—á—Ç–∞", "new_email"),
            ])
          );
        } else {
          await ctx.reply("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.");
          ctx.session.awaitingEmail = true;
        }
      } else if (ctx.session.awaitingEmail) {
        ctx.session.email = ctx.message.text;
        ctx.session.awaitingEmail = false;

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ –ø–æ—á—Ç—ã –≤ userState.json
        await userState(ctx, null, {
          name: ctx.session.name,
          email: ctx.session.email,
        });

        await ctx.reply(
          `–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏ –∏–º—è: ${ctx.session.name} –∏ –ø–æ—á—Ç—É: ${ctx.session.email}. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ https://quizwhizworld.top/`
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞:", err);
    }
  });

  bot.action("confirm_email", async (ctx) => {
    try {
      const userId = ctx.from?.id?.toString() || "unknown";
      let userStates = { sessions: [] };

      try {
        const userStatesData = await fs.readFile(stateFilePath, "utf8");
        userStates = JSON.parse(userStatesData);
      } catch (err) {
        if (err.code !== "ENOENT") {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ userStates.json:", err);
        }
      }

      const userSession = userStates.sessions.find(
        (session) => session.id === userId
      );

      if (userSession && userSession.email) {
        await userState(ctx, null, {
          name: ctx.session.name,
          email: userSession.email,
        });

        await ctx.reply(
          `–°–ø–∞—Å–∏–±–æ! –í—ã —É–∫–∞–∑–∞–ª–∏ –∏–º—è: ${ctx.session.name} –∏ –ø–æ—á—Ç—É: ${userSession.email}. –í–∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä–∞—Ç—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ https://quizwhizworld.top/`
        );
      } else {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–æ—á—Ç—ã.");
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã:", err);
    }
  });

  bot.action("new_email", async (ctx) => {
    try {
      await ctx.reply("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.");
      ctx.session.awaitingEmail = true;
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–π –ø–æ—á—Ç—ã:", err);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
  bot.action("back", async (ctx) => {
    try {
      const questionIndex = ctx.session.questionIndex || 0;
      if (questionIndex > 0) {
        ctx.session.questionIndex = questionIndex - 1;
        await ctx.reply("–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É.");
        await startQuiz(ctx);
      } else {
        await ctx.reply(
          "–ú—ã –Ω–µ –º–æ–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –≤—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ. –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
          {
            reply_markup: {
              inline_keyboard: [[{ text: "–í—ã–π—Ç–∏", callback_data: "exit" }]],
            },
          }
        );
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥':", err);
    }
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í—ã–π—Ç–∏"
  bot.action("exit", async (ctx) => {
    try {
      await ctx.reply(
        "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
      );
      ctx.session.questionIndex = 0; // –°–±—Ä–æ—Å –∏–Ω–¥–µ–∫—Å–∞ –≤–æ–ø—Ä–æ—Å–∞
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ '–í—ã–π—Ç–∏':", err);
    }
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
async function startQuiz(ctx) {
  const questionIndex = ctx.session.questionIndex || 0;
  if (questionIndex >= questions.length) {
    await ctx.reply(
      "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥"
    );
    return;
  }

  const question = questions[questionIndex];
  const optionsMarkup = {
    reply_markup: {
      inline_keyboard: [
        ...question.options.reduce((acc, option, index) => {
          const rowIndex = Math.floor(index / 2);
          if (!acc[rowIndex]) {
            acc[rowIndex] = [];
          }
          acc[rowIndex].push({
            text: option,
            callback_data: `answer_${index}`,
          });
          return acc;
        }, []),
        [{ text: "–ù–∞–∑–∞–¥", callback_data: "back" }],
      ],
    },
  };

  if (question.imageUrl) {
    await ctx.replyWithPhoto(
      { url: question.imageUrl },
      { caption: question.question, ...optionsMarkup }
    );
  } else {
    await ctx.reply(question.question, optionsMarkup);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é startQuiz –æ—Ç–¥–µ–ª—å–Ω–æ
module.exports.startQuiz = startQuiz;
